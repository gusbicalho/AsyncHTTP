module RWK
  #--------------------------------------------------------------------------
  # * RWK.url_encode(string)
  #--------------------------------------------------------------------------
  # URL-encodes a string
  # Copied from CGI::escape of Ruby
  #   RWK.url_encode("'Stop!' said Fred") => "%27Stop%21%27+said+Fred"
  #--------------------------------------------------------------------------
  def self.url_encode(string)
    string.gsub(/([^ a-zA-Z0-9_.-]+)/n) do
      '%' + $1.unpack('H2' * $1.size).join('%').upcase
    end.tr(' ', '+')
  end

  #--------------------------------------------------------------------------
  # * RWK.url_unencode(string)
  #--------------------------------------------------------------------------
  # Unencodes an url-encoded string
  # Copied from CGI::unescape of Ruby
  #   RWK.url_unencode("%27Stop%21%27+said+Fred") => "'Stop!' said Fred"
  #--------------------------------------------------------------------------
  def self.url_unencode(string)
    string.tr('+', ' ').gsub(/((?:%[0-9a-fA-F]{2})+)/n) do
      [$1.delete('%')].pack('H*')
    end
  end

  #--------------------------------------------------------------------------
  # * RWK.hash_to_url_string(hash)
  #--------------------------------------------------------------------------
  # Builds an url-string from a hash
  #--------------------------------------------------------------------------
  def self.hash_to_url_string(hash)
    s = ""
    hash.each_pair { |key, value|
      next if !key
      if value
        s += "#{url_encode(key.to_s)}=#{url_encode(value.to_s)}&"
      else
        s += "#{url_encode(key.to_s)}&"
      end
    }
    s = s[0,s.length-1]
    return s
  end
  
  #--------------------------------------------------------------------------
  # * RWK.url_string_to_hash(str)
  #--------------------------------------------------------------------------
  # Builds a hash from the name/value pair in a url-string
  #--------------------------------------------------------------------------
  def self.url_string_to_hash(str)
    pairs = str.split("&")
    hash = Hash.new
    pairs.each { |pair|
      a = pair.split("=")
      hash[url_unencode(a[0])] = a[1] ? url_unencode(a[1]) : nil
    }
    hash
  end

end